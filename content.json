{"meta":{"title":"Gloria","subtitle":"Java开发工程师","description":"java","author":"gloria","url":"https://gloriabing.github.io"},"posts":[{"title":"日本8日游","slug":"Japan-Journey","date":"2017-02-27T09:42:20.000Z","updated":"2017-02-28T02:35:44.000Z","comments":true,"path":"2017/02/27/Japan-Journey/","link":"","permalink":"https://gloriabing.github.io/2017/02/27/Japan-Journey/","excerpt":"日本8日游交通参考","text":"日本8日游交通参考 4月2日北京-东京-大阪 起点 目的地 交通方式 交通用时 费用 北京首都T38:30 东京羽田112:50 NH964航班 3小时25分 东京羽田112:50 大阪海湾塔酒店17:40 各种换乘，详见东京国际机场至Hotel Osaka Bay Tower - Google地图.pdf 3小时39分 15060円(其中1800円左右不包含在JR Pass中) 酒店18:30 心斋桥+吃晚饭21:00 中央线 各停学研奈良登美丘弁天町-本町 25分钟 240円 心斋桥21:00 梅田蓝天大厦 23:00 御堂筋线 各停新大阪心斋桥-梅田 20分钟 240円 梅田蓝天大厦23:00 酒店 大阪环状线 各停 内环Osaka Station-弁天町 30分钟 160円(JR) 4月3日环球影城 推荐游玩顺序： 入园-史瑞克4D（排队：编号20—太空幻想列车（排队：编号24）——魔鬼终结者（快速：编号31）——哈利禁忌（预约快速：哈利城堡） ——哈利鹰马（预约快速：哈利区）——飞天翼龙（预约快速：编号VII）——侏罗纪乘船游（快速：编号42）——大白鲨（排队：编号61）——好莱坞过山车（快速：编号08）——蜘蛛侠（快速：编号34）——浴火赤子情（排队：编号47） 顺序2：好莱坞过山车——侏罗纪公园——回到未来（排队）——蜘蛛侠——魔鬼终结者（排队）——下午三点哈利波特——晚上七点大白鲨。 参考最详细 4月4日 起点 目的地 交通方式 交通用时 费用 酒店7:00 姬路城9:15 各停天王寺（弁天町-Osaka Station） 换乘 东海道、山阳本线新快速 姬路（Osaka Station-姬路） 换乘 姫路城 ループバス姫路駅前［ループ］行（姫路駅前［ループ］（バス）-Shimizuhashi Bungakutatemae） 详见Hotel Osaka Bay Tower至姬路城 - Google地图.pdf——-或者——- Hotel Osaka Bay Tower至姬路城-省时费钱 - Google地图 1小时48分1小时30分 1760円4280円 姬路城11:30 待定 4月5日 起点 目的地 出行方式 交通用时 费用 大阪(7:20发车) 7：00 三十三间堂 8：00 京阪本线 (特急出町柳) 淀屋桥 — 三十三间堂 1小时 410円 三十三间堂 8：00 清水寺 9：30 步行 25分钟 清水寺 9：30 八坂神社 12：00 步行 20分钟 午饭 午饭 八坂神社 14：00 平安神宫 16：00 步行 ———————— 市営２０１甲（ 四条京阪前（バス） — 東山二条・岡崎公園口 30分钟 ———————— 16分钟 0 ———————— 230円 平安神宫 16：00 哲学の道，银阁寺 18：00 市営５ 或 市営32 東山二条・岡崎公園口（ バス — 銀閣寺道（バス） 25分钟 230円 祗园？ 4月6日 起点 目的地 出行方式 交通用时 费用 住处 8：00 岚山10：30 京福电铁岚山本线四条大宫-嵐山（京福電氣鐵道） 45分钟 210円 岚山10：30 渡月桥11：00 步行 15分钟 渡月桥11：00 天龙寺12：00 步行 15分钟 天龙寺12：00 野宫神社13：00 步行 15分钟 午饭 午饭 野宫神社14：30 金阁寺16：30 市営１１(山越中町行) 野々宮（バス）-山越中町（バス） 市営５９(山越中町行) 山越［京都］（バス）-金閣寺前（バス） 40分钟 460円 金阁寺16:30 二条城18:30 市営１０１或 市営１２ 30分钟 230円","raw":null,"content":null,"categories":[],"tags":[]},{"title":"阿里巴巴JAVA 开发手册 --- 安全规约","slug":"Alibaba-Java-Developers-Guide-Security","date":"2017-01-19T06:43:35.000Z","updated":"2017-01-19T06:44:10.000Z","comments":true,"path":"2017/01/19/Alibaba-Java-Developers-Guide-Security/","link":"","permalink":"https://gloriabing.github.io/2017/01/19/Alibaba-Java-Developers-Guide-Security/","excerpt":"阿里巴巴Java开发手册，安全规约部分。","text":"阿里巴巴Java开发手册，安全规约部分。 版本号 制定团队 更新日期 备注 1.0.0 阿里巴巴集团技术部 2016.12.7 首次向Java业界公开 1. 【强制】可被用户直接访问的功能必须进行权限控制校验。说明：防止没有做权限控制就可随意访问、操作别人的数据，比如查看、修改别人的订单。 2. 【强制】用户敏感数据禁止直接展示，必须对展示数据脱敏。说明：支付宝中查看个人手机号码会显示成:158**9119，隐藏中间4位，防止隐私泄露。 3. 【强制】用户输入的SQL参数严格使用参数绑定或者METADATA字段值限定，防止SQL注入，禁止字符串拼接SQL访问数据库。 4. 【强制】用户请求传入的任何参数必须做有效性验证。说明：忽略参数校验可能导致： page size过大导致内存溢出 恶意order by导致数据库慢查询 正则输入源串拒绝服务ReDOS 任意重定向 SQL注入 Shell注入 反序列化注入5. 【强制】禁止向HTML页面输出未经安全过滤或未正确转义的用户数据。6. 【强制】表单、AJAX提交必须执行CSRF安全过滤。说明：CSRF(Cross-siterequestforgery)跨站请求伪造是一类常见编程漏洞。对于存在CSRF漏洞的应用/网站，攻击者可以事先构造好URL，只要受害者用户一访问，后台便在用户不知情情况下对数据库中用户参数进行相应修改。7. 【强制】URL外部重定向传入的目标地址必须执行白名单过滤。 123456789//正例 ： try &#123; if (com.alibaba.fasttext.sec.url.CheckSafeUrl.getDefaultInstance().inWhiteList(targetUrl))&#123; response.sendRedirect(targetUrl); &#125; &#125; catch (IOException e) &#123; logger.error(\"Check returnURL error! targetURL=\" + targetURL, e); throw e; &#125; 8. 【强制】Web应用必须正确配置Robots文件，非SEO URL必须配置为禁止爬虫访问。User-agent: * Disallow: /9. 【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放限制，如数量限制、疲劳度控制、验证码校验，避免被滥刷、资损。说明：如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其它用户，并造成短信平台资源浪费。 10.【推荐】发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。","raw":null,"content":null,"categories":[],"tags":[{"name":"开发规范","slug":"开发规范","permalink":"https://gloriabing.github.io/tags/开发规范/"}]},{"title":"阿里巴巴JAVA 开发手册 --- 工程规约","slug":"Alibaba-Java-Developers-Guide-Project","date":"2017-01-19T06:37:01.000Z","updated":"2017-01-21T13:12:50.000Z","comments":true,"path":"2017/01/19/Alibaba-Java-Developers-Guide-Project/","link":"","permalink":"https://gloriabing.github.io/2017/01/19/Alibaba-Java-Developers-Guide-Project/","excerpt":"阿里巴巴Java开发手册，工程规约部分。介绍应用分层、二方库、服务器等规范。","text":"阿里巴巴Java开发手册，工程规约部分。介绍应用分层、二方库、服务器等规范。 版本号 制定团队 更新日期 备注 1.0.0 阿里巴巴集团技术部 2016.12.7 首次向Java业界公开 (一) 应用分层1. 【推荐】图中默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于Web层，也可以直接依赖于Service层，依此类推： 开放接口层：可直接封装Service接口暴露成RPC接口；通过Web封装成http接口；网关控制层等。终端显示层：各个端的模板渲染并执行显示层。当前主要是velocity渲染，JS渲染，JSP渲染，移动端展示层等。 Web层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。 Service层：相对具体的业务逻辑服务层。 Manager层：通用业务处理层，它有如下特征： 对第三方平台封装的层，预处理返回结果及转化异常信息； 对Service层通用能力的下沉，如缓存方案、中间件通用处理； 与DAO层交互，对DAO的业务通用能力的封装。 DAO层：数据访问层，与底层Mysql、Oracle、Hbase、OB进行数据交互。外部接口或第三方平台：包括其它部门RPC开放接口，基础平台，其它公司的HTTP接口。2. 【参考】（分层异常处理规约）在DAO层，产生的异常类型有很多，无法用细粒度异常进行catch，使用catch(Exception e)方式，并throw new DaoException(e)，不需要打印日志，因为日志在Manager/Service层一定需要捕获并打到日志文件中去，如果同台服务器再打日志，浪费性能和存储。在Service层出现异常时，必须记录日志信息到磁盘，尽可能带上参数信息，相当于保护案发现场。如果Manager层与Service同机部署，日志方式与DAO层处理一致，如果是单独部署，则采用与Service一致的处理方式。Web层绝不应该继续往上抛异常，因为已经处于顶层，无继续处理异常的方式，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面，尽量加上友好的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。 3. 【参考】分层领域模型规约： DO（Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。 DTO（Data Transfer Object）：数据传输对象，Service和Manager向外传输的对象。 BO（Business Object）：业务对象。可以由Service层输出的封装业务逻辑的对象。 QUERY：数据查询对象，各层接收上层的查询请求。注：超过2个参数的查询封装，禁止使用Map类来传输。 VO（View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。 (二) 二方库规约1. 【强制】定义GAV遵从以下规则： GroupID格式：com.{公司/BU }.业务线.[子业务线]，最多4级。说明：{公司/BU} 例如：alibaba/taobao/tmall/aliexpress等BU一级；子业务线可选。 1正例 ：com.taobao.tddl 或 com.alibaba.sourcing.multilang ArtifactID格式：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。 1正例 ：tc-client / uic-api / tair-tool Version：详细规定参考下方。 2. 【强制】二方库版本号命名方式：主版本号.次版本号.修订号 主版本号：当做了不兼容的API 修改，或者增加了能改变产品方向的新功能。 次版本号：当做了向下兼容的功能性新增（新增类、接口等）。 修订号：修复bug，没有修改方法签名的功能加强，保持 API 兼容性。 3. 【强制】线上应用不要依赖SNAPSHOT版本（安全包除外）；正式发布的类库必须使用RELEASE版本号升级+1的方式，且版本号不允许覆盖升级，必须去中央仓库进行查证。说明：不依赖SNAPSHOT版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。 4. 【强制】二方库的新增或升级，保持除功能点之外的其它jar包仲裁结果不变。如果有改变，必须明确评估和验证，建议进行dependency:resolve前后信息比对，如果仲裁结果完全不一致，那么通过dependency:tree命令，找出差异点，进行排除jar包。5. 【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的POJO对象。6. 【强制】依赖于一个二方库群时，必须定义一个统一版本变量，避免版本号不一致。说明：依赖springframework-core,-context,-beans，它们都是同一个版本，可以定义一个变量来保存版本：${spring.version}，定义依赖的时候，引用该版本。 7. 【强制】禁止在子项目的pom依赖中出现相同的GroupId，相同的ArtifactId，但是不同的Version。说明：在本地调试时会使用各子项目指定的版本号，但是合并成一个war，只能有一个版本号出现在最后的lib目录中。曾经出现过线下调试是正确的，发布到线上出故障的先例。 8. 【推荐】工具类二方库已经提供的，尽量不要在本应用中编程实现。 json操作： fastjson md5操作：commons-codec 工具集合：Guava包 数组操作：ArrayUtils（org.apache.commons.lang3.ArrayUtils） 集合操作：CollectionUtils(org.apache.commons.collections4.CollectionUtils) 除上面以外还有NumberUtils、DateFormatUtils、DateUtils等优先使用org.apache.commons.lang3这个包下的，不要使用org.apache.commons.lang包下面的。原因是commons.lang这个包是从JDK1.2开始支持的所以很多1.5/1.6的特性是不支持的，例如：泛型。 9. 【推荐】所有pom文件中的依赖声明放在语句块中，所有版本仲裁放在dependencyManagement&gt;语句块中。说明：里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖，version和scope都读取自父pom。而所有声明在主pom的里的依赖都会自动引入，并默认被所有的子项目继承。 10.【推荐】二方库尽量不要有配置项，最低限度不要再增加配置项。11.【参考】为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则： 精简可控原则。移除一切不必要的API和依赖，只包含 Service API、必要的领域模型对象、Utils类、常量、枚举等。如果依赖其它二方库，尽量是provided引入，让二方库使用者去依赖具体版本号；无log具体实现，只依赖日志框架。 稳定可追溯原则。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。 (三) 服务器规约1. 【推荐】高并发服务器建议调小TCP协议的time_wait超时时间。说明：操作系统默认240秒后，才会关闭处于time_wait状态的连接，在高并发访问下，服务器端会因为处于time_wait的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。 1正例 ：在linux服务器上请通过变更/etc/sysctl.conf文件去修改该缺省值（秒）：net.ipv4.tcp_fin_timeout = 30 2. 【推荐】调大服务器所支持的最大文件句柄数（File Descriptor，简写为fd）。说明：主流操作系统的设计是将TCP/UDP连接采用与文件一样的方式去管理，即一个连接对应于一个fd。主流的linux服务器默认所支持最大fd数量为1024，当并发连接数很大时很容易因为fd不足而出现“open too many files”错误，导致新的连接无法建立。 建议将linux服务器所支持的最大句柄数调高数倍（与服务器的内存数量相关）。 3. 【推荐】给JVM设置-XX:+HeapDumpOnOutOfMemoryError参数，让JVM碰到OOM场景时输出dump信息。说明：OOM的发生是有概率的，甚至有规律地相隔数月才出现一例，出现时的现场信息对查错非常有价值。 4. 【参考】服务器内部重定向必须使用forward；外部重定向地址必须使用URL Broker生成，否则因线上采用HTTPS协议而导致浏览器提示“不安全”。此外，还会带来URL维护不一致的问题。","raw":null,"content":null,"categories":[],"tags":[{"name":"开发规范","slug":"开发规范","permalink":"https://gloriabing.github.io/tags/开发规范/"}]},{"title":"阿里巴巴JAVA 开发手册 --- MYSQL规约","slug":"Alibaba-Java-Developers-Guide-MYSQL","date":"2017-01-19T02:44:58.000Z","updated":"2017-02-03T06:48:28.000Z","comments":true,"path":"2017/01/19/Alibaba-Java-Developers-Guide-MYSQL/","link":"","permalink":"https://gloriabing.github.io/2017/01/19/Alibaba-Java-Developers-Guide-MYSQL/","excerpt":"阿里巴巴Java开发手册，mysql规约部分。介绍表设计、建表、字段定义、索引等规范。","text":"阿里巴巴Java开发手册，mysql规约部分。介绍表设计、建表、字段定义、索引等规范。 版本号 制定团队 更新日期 备注 1.0.0 阿里巴巴集团技术部 2016.12.7 首次向Java业界公开 (一) 建表规约1. 【强制】表达是与否概念的字段，必须使用is_xxx的方式命名，数据类型是unsignedtinyint（ 1表示是，0表示否），此规则同样适用于odps建表。说明：任何字段如果为非负数，必须是unsigned。 2. 【强制】表名、字段名必须使用小写字母或数字；禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。12正例 ：getter_admin，task_config，level3_name反例 ：GetterAdmin，taskConfig，level_3_name 3. 【强制】表名不使用复数名词。说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于DO类名也是单数形式，符合表达习惯。 4. 【强制】禁用保留字，如desc、range、match、delayed等，参考官方保留字。5. 【强制】唯一索引名为uk字段名；普通索引名则为idx字段名。说明：uk 即 unique key；idx 即index的简称。 6. 【强制】小数类型为decimal，禁止使用float和double。说明：float和double在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过decimal的范围，建议将数据拆成整数和小数分开存储。 7. 【强制】如果存储的字符串长度几乎相等，使用CHAR定长字符串类型。8. 【强制】varchar是可变长字符串，不预先分配存储空间，长度不要超过5000，如果存储长度大于此值，定义字段类型为TEXT，独立出来一张表，用主键来对应，避免影响其它字段索引效率。9. 【强制】表必备三字段：id, gmt_create, gmt_modified。说明：其中id必为主键，类型为unsigned bigint、单表时自增、步长为1；分表时改为从TDDL Sequence取值，确保分表之间的全局唯一。gmt_create, gmt_modified的类型均为date_time类型。 10.【推荐】表的命名最好是加上“业务名称_表的作用”，避免上云梯后，再与其它业务表关联时有混淆。1正例 ：tiger_task / tiger_reader / mpp_config 11.【推荐】库名与应用名称尽量一致。12.【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。13.【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循： 不是频繁修改的字段。 不是varchar超长字段，更不能是text字段。 1正例 ：各业务线经常冗余存储商品名称，避免查询时需要调用IC服务获取。 14.【推荐】单表行数超过500万行或者单表容量超过2GB，才推荐进行分库分表。说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。 1反例 ：某业务三年总数据量才2万行，却分成1024张表，问：你为什么这么设计？答：分1024张表，不是标配吗？ 15.【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。1正例 ：人的年龄用unsignedtinyint（表示范围0-255，人的寿命不会超过255岁）；海龟就必须是smallint，但如果是太阳的年龄，就必须是int；如果是所有恒星的年龄都加起来，那么就必须使用bigint。 (二) 索引规约1. 【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。说明：不要以为唯一索引影响了insert速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验和控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。 2. 【强制】超过三个表禁止join。需要join的字段，数据类型保持绝对一致；多表关联查询时，保证被关联的字段需要有索引。说明：即使双表join也要注意表索引、SQL性能。 3. 【强制】在varchar字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度。说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为20的索引，区分度会高达90%以上，可以使用count(distinct left(列名, 索引长度))/count(*)的区分度来确定。 4. 【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。说明：索引文件具有B-Tree的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。 5. 【推荐】如果有order by的场景，请注意利用索引的有序性。order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现file_sort的情况，影响查询性能。123 正例 ：where a=? and b=? order by c; 索引：a_b_c 反例 ：索引中有范围查找，那么索引有序性无法利用，如：WHERE a&gt;10 ORDER BY b; 索引a_b无法排序。 6. 【推荐】利用覆盖索引来进行查询操作，来避免回表操作。说明：如果一本书需要知道第11章是什么标题，会翻开第11章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。 12 正例 ：IDB能够建立索引的种类：主键索引、唯一索引、普通索引，而覆盖索引是一种查询的一种效果，用explain的结果，extra列会出现：using index. 7. 【推荐】利用延迟关联或者子查询优化超多分页场景。说明：MySQL并不是跳过offset行，而是取offset+N行，然后返回放弃前offset行，返回N行，那当offset特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行SQL改写。 12正例 ：先快速定位需要获取的id段，然后再关联：SELECT a.* FROM 表1 a, (select id from 表1 where 条件 LIMIT 100000,20 ) b where a.id=b.id 8. 【推荐】SQL性能优化的目标：至少要达到 range 级别，要求是ref级别，如果可以是consts最好。说明： consts 单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。 ref 指的是使用普通的索引。（normal index） range 对索引进范围检索。 12 反例 ：explain表的结果，type=index，索引物理文件全扫描，速度非常慢，这个index级别比较range还低，与全表扫描是小巫见大巫。 9. 【推荐】建组合索引的时候，区分度最高的在最左边。1正例 ：如果wherea=?andb=? ，a列的几乎接近于唯一值，那么只需要单建idx_a索引即可。 说明：存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如：wherea&gt;?and b=? 那么即使a的区分度更高，也必须把b放在索引的最前列。 10.【参考】创建索引时避免有如下极端误解： 误认为一个查询就需要建一个索引。 误认为索引会消耗空间、严重拖慢更新和新增速度。 误认为唯一索引一律需要在应用层通过“先查后插”方式解决。 (三) SQL规约1. 【强制】不要使用count(列名)或count(常量)来替代count()，count()就是SQL92定义的标准统计行数的语法，跟数据库无关，跟NULL和非NULL无关。说明：count(*)会统计值为NULL的行，而count(列名)不会统计此列为NULL值的行。 2. 【强制】count(distinct col) 计算该列除NULL之外的不重复数量。注意 count(distinctcol1, col2) 如果其中一列全为NULL，那么即使另一列有不同的值，也返回为0。3. 【强制】当某一列的值全是NULL时，count(col)的返回结果为0，但sum(col)的返回结果为NULL，因此使用sum()时需注意NPE问题。12 正例 ：可以使用如下方式来避免sum的NPE问题：SELECTIF(ISNULL(SUM(g)),0,SUM(g))FROMtable; 4. 【强制】使用ISNULL()来判断是否为NULL值。注意：NULL与任何值的直接比较都为NULL。说明： NULL&lt;&gt;NULL的返回结果是NULL，不是false。 NULL=NULL的返回结果是NULL，不是true。 NULL&lt;&gt;1的返回结果是NULL，而不是true。 5. 【强制】在代码中写分页查询逻辑时，若count为0应直接返回，避免执行后面的分页语句。6. 【强制】不得使用外键与级联，一切外键概念必须在应用层解决。说明：（概念解释）学生表中的student_id是主键，那么成绩表中的student_id则为外键。如果更新学生表中的student_id，同时触发成绩表中的student_id更新，则为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。 7. 【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。8. 【强制】IDB数据订正时，删除和修改记录时，要先select，避免出现误删除，确认无误才能提交执行。9. 【推荐】in操作能避免则避免，若实在避免不了，需要仔细评估in后边的集合元素数量，控制在1000个之内。10.【参考】因阿里巴巴全球化需要，所有的字符存储与表示，均以utf-8编码，那么字符计数方法注意：说明：SELECT LENGTH(“阿里巴巴”)； 返回为12SELECT CHARACTER_LENGTH(“阿里巴巴”)； 返回为4如果要使用表情，那么使用utfmb4来进行存储，注意它与utf-8编码。 11.【参考】TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但TRUNCATE无事务且不触发trigger，有可能造成事故，故不建议在开发代码中使用此语句。说明：TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。 (四) ORM规约1. 【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。说明： 增加查询分析器解析成本。 增减字段容易与resultMap配置不一致。 2. 【强制】POJO类的boolean属性不能加is，而数据库字段必须加is_，要求在resultMap中进行字段与属性之间的映射。说明：参见定义POJO类以及数据库字段定义规定，在sql.xml增加映射，是必须的。 3. 【强制】不要用resultClass当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义；反过来，每一个表也必然有一个与之对应。说明：配置映射关系，使字段与DO类解耦，方便维护。 4. 【强制】xml配置中参数注意使用：#{}，#param# 不要使用${} 此种方式容易出现SQL注入。5. 【强制】iBATIS自带的queryForList(String statementName,int start,int size)不推荐使用。说明：其实现方式是在数据库取到statementName对应的SQL语句的所有记录，再通过subList取start,size的子集合，线上因为这个原因曾经出现过OOM。 1234正例 ：在sqlmap.xml中引入 #start#, #size# Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put(\"start\", start); map.put(\"size\", size); 6. 【强制】不允许直接拿HashMap与HashTable作为查询结果集的输出。1反例 ：某同学为避免写一个&lt;resultMap&gt;，直接使用HashTable来接收数据库返回结果，结果出现日常是把bigint转成Long值，而线上由于数据库版本不一样，解析成BigInteger，导致线上问题。 7. 【强制】更新数据表记录时，必须同时更新记录对应的gmt_modified字段值为当前时间。8. 【推荐】不要写一个大而全的数据更新接口，传入为POJO类，不管是不是自己的目标更新字段，都进行update table set c1=value1,c2=value2,c3=value3; 这是不对的。执行SQL时，尽量不要更新无改动的字段，一是易出错；二是效率低；三是binlog增加存储。9. 【参考】@Transactional事务不要滥用。事务会影响数据库的QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。10.【参考】中的compareValue是与属性值对比的常量，一般是数字，表示相等时带上此条件；表示不为空且不为null时执行；表示不为null值时执行。","raw":null,"content":null,"categories":[],"tags":[{"name":"开发规范","slug":"开发规范","permalink":"https://gloriabing.github.io/tags/开发规范/"}]},{"title":"阿里巴巴JAVA 开发手册 --- 异常日志","slug":"Alibaba-Java-Developers-Guide-Exception","date":"2017-01-19T02:35:43.000Z","updated":"2017-02-03T06:54:10.000Z","comments":true,"path":"2017/01/19/Alibaba-Java-Developers-Guide-Exception/","link":"","permalink":"https://gloriabing.github.io/2017/01/19/Alibaba-Java-Developers-Guide-Exception/","excerpt":"阿里巴巴Java开发手册，异常日志部分。介绍如何正确使用和定义异常，同时介绍了日志打印的相关规范。","text":"阿里巴巴Java开发手册，异常日志部分。介绍如何正确使用和定义异常，同时介绍了日志打印的相关规范。 版本号 制定团队 更新日期 备注 1.0.0 阿里巴巴集团技术部 2016.12.7 首次向Java业界公开 (一) 异常处理1. 【强制】不要捕获Java类库中定义的继承自RuntimeException的运行时异常类，如：IndexOutOfBoundsException / NullPointerException，这类异常由程序员预检查来规避，保证程序健壮性。12正例 ：if(obj != null) &#123;...&#125;反例 ：try &#123; obj.method() &#125; catch(NullPointerException e)&#123;…&#125; 2. 【强制】异常不要用来做流程控制，条件控制，因为异常的处理效率比条件分支低。3. 【强制】对大段代码进行try-catch，这是不负责任的表现。catch时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的catch尽可能进行区分异常类型，再做对应的异常处理。4. 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。5. 【强制】有try块放到了事务代码中，catch异常后，如果需要回滚事务，一定要注意手动回滚事务。6. 【强制】finally块必须对资源对象、流对象进行关闭，有异常也要做try-catch。说明：如果JDK7，可以使用try-with-resources方法。 7. 【强制】不能在finally块中使用return，finally块中的return返回后方法结束执行，不会再执行try块中的return语句。8. 【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。说明：如果预期抛的是绣球，实际接到的是铅球，就会产生意外情况。 9. 【推荐】方法的返回值可以为null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回null值。调用方需要进行null判断防止NPE问题。说明：本规约明确防止NPE是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败，运行时异常等场景返回null的情况。 10.【推荐】防止NPE，是程序员的基本修养，注意NPE产生的场景： 返回类型为包装数据类型，有可能是null，返回int值时注意判空。 1反例 ：public int f()&#123; return Integer对象&#125;，如果为null，自动解箱抛NPE。 数据库的查询结果可能为null。 集合里的元素即使isNotEmpty，取出的数据元素也可能为null。 远程调用返回对象，一律要求进行NPE判断。 对于Session中获取的数据，建议NPE检查，避免空指针。 级联调用obj.getA().getB().getC()；一连串调用，易产生NPE。 11.【推荐】在代码中使用“抛异常”还是“返回错误码”，对于公司外的http/api开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间RPC调用优先考虑使用Result方式，封装isSuccess、“错误码”、“错误简短信息”。说明：关于RPC方法返回方式使用Result方式的理由： 使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。 如果不加栈信息，只是new自定义异常，加入自己的理解的error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。 12.【推荐】定义时区分unchecked / checked 异常，避免直接使用RuntimeException抛出，更不允许抛出Exception或者Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DaoException / ServiceException等。13.【参考】避免出现重复的代码（Don’t Repeat Yourself），即DRY原则。说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是共用模块。 123正例 ： 一个类中有多个public方法，都需要进行数行相同的参数校验操作，这个时候请抽取： private boolean checkParam(DTO dto)&#123;...&#125; ##(二) 日志规约 1. 【强制】应用中不可直接使用日志系统（Log4j、Logback）中的API，而应依赖使用日志框架SLF4J中的API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。123import org.slf4j.Logger;import org.slf4j.LoggerFactory;private static final Logger logger = LoggerFactory.getLogger(Abc.class); 2. 【强制】日志文件推荐至少保存15天，因为有些异常具备以“周”为频次发生的特点。3. 【强制】应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：appName_logType_logName.log。logType:日志类型，推荐分类有stats/desc/monitor/visit等；logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。1正例 ：mppserver应用中单独监控时区转换异常，如：mppserver_monitor_timeZoneConvert.log 说明：推荐对日志进行分类，错误日志和业务日志尽量分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。 4. 【强制】对trace/debug/info级别的日志输出，必须使用条件输出形式或者使用占位符的方式。说明：logger.debug(“Processing trade with id: “ + id + “ symbol: “ + symbol); 如果日志级别是warn，上述日志不会打印，但是会执行字符串拼接操作，如果symbol是对象，会执行toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。 123456//正例 ：（条件） if (logger.isDebugEnabled()) &#123; logger.debug(\"Processing trade with id: \" + id + \" symbol: \" + symbol); &#125;//正例 ：（占位符） logger.debug(\"Processing trade with id: &#123;&#125; and symbol : &#123;&#125; \", id, symbol); 5. 【强制】避免重复打印日志，浪费磁盘空间，务必在log4j.xml中设置additivity=false。1正例 ：&lt;logger name=&quot;com.taobao.ecrm.member.config&quot; additivity=&quot;false&quot;&gt; 6. 【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么往上抛。1正例 ：logger.error(各类参数或者对象toString + &quot;_&quot; + e.getMessage(), e); 7. 输出的POJO类必须重写toString方法，否则只输出此对象的hashCode值（地址值），没啥参考意义。8. 【推荐】可以使用warn日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。注意日志输出的级别，error级别只记录系统逻辑出错、异常、或者重要的错误信息。如非必要，请不要在此场景打出error级别，避免频繁报警。9. 【推荐】谨慎地记录日志。生产环境禁止输出debug日志；有选择地输出info日志；如果使用warn来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。说明：大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。纪录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？ 10.【参考】如果日志用英文描述不清楚，推荐使用中文注释。对于中文UTF-8的日志，在secureCRT中，setencoding=utf-8；如果中文字符还乱码，请设置：全局&gt;默认的会话设置&gt;外观&gt;字体&gt;选择字符集gb2312；如果还不行，执行命令：set termencoding=gbk，并且直接使用中文来进行检索。","raw":null,"content":null,"categories":[],"tags":[{"name":"开发规范","slug":"开发规范","permalink":"https://gloriabing.github.io/tags/开发规范/"}]},{"title":"阿里巴巴JAVA 开发手册 --- 编程规约","slug":"Alibaba-Java-Developers-Guide-Programming","date":"2017-01-18T08:45:38.000Z","updated":"2017-01-19T03:14:44.000Z","comments":true,"path":"2017/01/18/Alibaba-Java-Developers-Guide-Programming/","link":"","permalink":"https://gloriabing.github.io/2017/01/18/Alibaba-Java-Developers-Guide-Programming/","excerpt":"阿里巴巴Java开发手册，编程规约部分。介绍内容：命名规约，常量定义，格式规约，OOP规约，集合处理，并发处理，控制语句，注释规约，其他。\n建议严格遵守开发规范，保持良好编程风格。","text":"阿里巴巴Java开发手册，编程规约部分。介绍内容：命名规约，常量定义，格式规约，OOP规约，集合处理，并发处理，控制语句，注释规约，其他。 建议严格遵守开发规范，保持良好编程风格。 版本号 制定团队 更新日期 备注 1.0.0 阿里巴巴集团技术部 2016.12.7 首次向Java业界公开 (一) 命名规约1. 【强制】所有编程相关命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。1反例 ： _name / __name / $Object / name_ / name$ / Object$ 2. 【强制】所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。 123反例 ： DaZhePromotion [打折] / getPingfenByName() [评分] / int 变量 = 3;正例 ： ali / alibaba / taobao / cainiao / aliyun / youku / hangzhou 等国际通用的名称，可视为英文。 3. 【强制】类名使用UpperCamelCase风格，必须遵从驼峰形式，但以下情形例外：（领域模型的相关命名）DO / DTO / VO / DAO等。12正例 ：MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion反例 ：macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion 4. 【强制】方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase风格，必须遵从驼峰形式。1正例 ： localValue / getHttpMessage() / inputUserId 5. 【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。12正例 ： MAX_STOCK_COUNT反例 ： MAX_COUNT 6. 【强制】抽象类命名使用Abstract或Base开头；异常类命名使用Exception结尾；测试类命名以它要测试的类的名称开始，以Test结尾。7. 【强制】中括号是数组类型的一部分，数组定义如下：String[] args;1反例 ：请勿使用String args[]的方式来定义 8. 【强制】POJO类中的任何布尔类型的变量，都不要加is，否则部分框架解析会引起序列化错误。12 反例 ：定义为基本数据类型boolean isSuccess；的属性，它的方法也是isSuccess()，RPC框架在反向解析的时候，“以为”对应的属性名称是success，导致属性获取不到，进而抛出异常。 9. 【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。1正例 ： 应用工具类包名为com.alibaba.mpp.util、类名为MessageUtils（此规则参考spring的框架结构） 10. 【强制】杜绝完全不规范的缩写，避免望文不知义。1反例 ：&lt;某业务代码&gt;AbstractClass“缩写”命名成AbsClass；condition“缩写”命名成condi，此类随意缩写严重降低了代码的可阅读性。 11. 【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。 1234正例 ： public class OrderFactory; public class LoginProxy; public class ResourceObserver; 12. 【推荐】接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的javadoc注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。1234567 正例 ： 接口方法签名：void f(); 接口基础常量表示：String COMPANY = &quot;alibaba&quot;; 反例 ： 接口方法定义：public abstract void f();说明：JDK8中接口允许有默认实现，那么这个default方法，是对所有实现类都有价值的默认实现。 13. 接口和实现类的命名有两套规则： 【强制】对于Service和DAO类，基于SOA的理念，暴露出来的服务一定是接口，内部的实现类用Impl的后缀与接口区别。正例 ：CacheServiceImpl实现CacheService接口。 【推荐】 如果是形容能力的接口名称，取对应的形容词做接口名（通常是–able的形式）。 1正例 ：AbstractTranslator实现 Translatable。 14. 【参考】枚举类名建议带上Enum后缀，枚举成员名称需要全大写，单词间用下划线隔开。说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。 123正例 ： 枚举名字：DealStatusEnum； 成员名称：SUCCESS / UNKOWN_REASON。 15. 【参考】各层命名规约： Service/DAO层方法命名规约 获取单个对象的方法用get做前缀。 获取多个对象的方法用list做前缀。 获取统计值的方法用count做前缀。 插入的方法用save（推荐）或insert做前缀。 删除的方法用remove（推荐）或delete做前缀。 修改的方法用update做前缀。 领域模型命名规约 数据对象：xxxDO，xxx即为数据表名。 数据传输对象：xxxDTO，xxx为业务领域相关的名称。 展示对象：xxxVO，xxx一般为网页名称。 POJO是DO/DTO/BO/VO的统称，禁止命名成xxxPOJO。 (二) 常量定义1. 【强制】不允许出现任何魔法值（即未经定义的常量）直接出现在代码中。123反例 ： String key=&quot;Id#taobao_&quot;+tradeId； cache.put(key, value); 2. 【强制】long或者Long初始赋值时，必须使用大写的L，不能是小写的l，小写容易跟数字1混淆，造成误解。说明：Long a = 2l; 写的是数字的21，还是Long型的2? 3. 【推荐】不要使用一个常量类维护所有常量，应该按常量功能进行归类，分开维护。如：缓存相关的常量放在类：CacheConsts下；系统配置相关的常量放在类：ConfigConsts下。说明：大而全的常量类，非得ctrl+f才定位到修改的常量，不利于理解，也不利于维护。 4. 【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。 跨应用共享常量：放置在二方库中，通常是client.jar中的const目录下。 应用内共享常量：放置在一方库的modules中的const目录下。 1234反例 ：易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量： 类A中：public static final String YES = &quot;yes&quot;; 类B中：public static final String YES = &quot;y&quot;;A.YES.equals(B.YES)，预期是true，但实际返回为false，导致产生线上问题。 子工程内部共享常量：即在当前子工程的const目录下。 包内共享常量：即在当前包下单独的const目录下。 类内共享常量：直接在类内部private static final定义。 5. 【推荐】如果变量值仅在一个范围内变化用Enum类。如果还带有名称之外的延伸属性，必须使用Enum类，下面正例 中的数字就是延伸信息，表示星期几。12 正例 ：public Enum&#123; MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5),SATURDAY(6), SUNDAY(7);&#125; ##(三) 格式规约 【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则： 左大括号前不换行。 左大括号后换行。 右大括号前换行。 右大括号后还有else等代码则不换行；表示终止右大括号后必须换行。 【强制】 左括号和后一个字符之间不出现空格；同样，右括号和前一个字符之间也不出现空格。详见第5条下方正例 提示。 【强制】if/for/while/switch/do等保留字与左右括号之间都必须加空格。 【强制】任何运算符左右必须加一个空格。说明：运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号、三目运行符等。 【强制】代码块缩进4个空格，如果使用tab缩进，请设置成1个tab为4个空格。 12345678910111213141516171819//正例 ： （涉及1-5点）public static void main(String args[]) &#123; // 缩进4个空格 String say = \"hello\"; // 运算符的左右必须有一个空格 int flag = 0; // 关键词if与括号之间必须有一个空格，括号内f与左括号，1与右括号不需要空格 if (flag == 0) &#123; System.out.println(say); &#125; // 左大括号前加空格且不换行；左大括号后换行 if (flag == 1) &#123; System.out.println(\"world\"); &#125; // 右大括号前换行，右大括号后有else，不用换行 else &#123; System.out.println(\"ok\"); // 右大括号做为结束，必须换行 &#125;&#125; 6. 【强制】单行字符数限制不超过120个，超出需要换行，换行时，遵循如下原则： 换行时相对上一行缩进4个空格。 运算符与下文一起换行。 方法调用的点符号与下文一起换行。 在多个参数超长，逗号后进行换行。 在括号前不要换行，见反例 。 12345678910111213//正例 ： StringBuffer sb = new StringBuffer(); //超过120个字符的情况下，换行缩进4个空格，并且方法前的点符号一起换行 sb.append(\"zi\").append(\"xin\")… append(\"huang\");//反例 ： StringBuffer sb = new StringBuffer(); //超过120个字符的情况下，不要在括号前换行 sb.append(\"zi\").append(\"xin\")…append (\"huang\"); //参数很多的方法调用也超过120个字符，逗号后才是换行处 method(args1, args2, args3, ..., argsX); 7. 【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。12正例 ：下例中实参的&quot;a&quot;,后边必须要有一个空格。 method(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;); 8. 【推荐】没有必要增加若干空格来使某一行的字符与上一行的相应字符对齐。123456//正例 ： int a = 3; long b = 4L; float c = 5F; StringBuffer sb = new StringBuffer();//说明：增加sb这个变量，如果需要对齐，则给a、b、c都要增加几个空格，在变量比较多的情况下，是一种累赘的事情。 9.【强制】IDE的text file encoding设置为UTF-8; IDE中文件的换行符使用Unix格式，不要使用windows格式。10. 【推荐】方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。说明：没有必要插入多行空格进行隔开。 (四) OOP规约1. 【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。2. 【强制】所有的覆写方法，必须加@Override注解。123 反例 ：getObject()与get0bject()的问题。一个是字母的O，一个是数字的0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。 3. 【强制】相同参数类型，相同业务含义，才可以使用Java的可变参数，避免使用Object。说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程） 1正例 ：public User getUsers(String type, Integer... ids); 4. 【强制】对外暴露的接口签名，原则上不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@Deprecated注解，并清晰地说明采用的新接口或者新服务是什么。5. 【强制】不能使用过时的类或方法。说明：java.net.URLDecoder 中的方法decode(String encodeStr) 这个方法已经过时，应该使用双参数decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。 6. 【强制】Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。123正例 ： &quot;test&quot;.equals(object);反例 ： object.equals(&quot;test&quot;); 说明：推荐使用java.util.Objects#equals （JDK7引入的工具类） 7. 【强制】所有的相同类型的包装类对象之间值的比较，全部使用equals方法比较。说明：对于Integervar=?在-128至127之间的赋值，Integer对象是在IntegerCache.cache产生，会复用已有对象，这个区间内的Integer值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用equals方法进行判断。 8. 【强制】关于基本数据类型与包装数据类型的使用标准如下： 所有的POJO类属性必须使用包装数据类型。 RPC方法的返回值和参数必须使用包装数据类型。 所有的局部变量推荐使用基本数据类型。说明：POJO类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE问题，或者入库检查，都由使用者来保证。 12正例 ：数据库的查询结果可能是null，因为自动拆箱，用基本数据类型接收有NPE风险。反例 ：某业务的交易报表上显示成交总额涨跌情况，即正负x%，x为基本数据类型，调用的RPC服务，调用不成功时，返回的是默认值，页面显示：0%，这是不合理的，应该显示成中划线-。所以包装数据类型的nul值，能够表示额外的信息，如：远程调用失败，异常退出。 9. 【强制】定义DO/DTO/VO等POJO类时，不要设定任何属性默认值。12 反例 ：某业务的DO的gmtCreate默认值为new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。 10.【强制】序列化类新增属性时，请不要修改serialVersionUID字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改serialVersionUID值。说明：注意serialVersionUID不一致会抛出序列化运行时异常。 11.【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在init方法中。12.【强制】POJO类必须写toString方法。使用工具类source&gt; generate toString时，如果继承了另一个POJO类，注意在前面加一下super.toString。说明：在方法执行抛出异常时，可以直接调用POJO的toString()方法打印其属性值，便于排查问题。 13.【推荐】使用索引访问用String的split方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛IndexOutOfBoundsException的风险。说明：String str = “a,b,c,,”;String[] ary = str.split(“,”);//预期大于3，结果是3System.out.println(ary.length); 14.【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读。15.【推荐】 类内方法定义顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter/setter方法。说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为方法信息价值较低，所有Service和DAO的getter/setter方法放在类体最后。 16.【推荐】setter方法中，参数名称与类成员变量名称一致，this.成员名=参数名。在getter/setter方法中，尽量不要增加业务逻辑，增加排查问题难度。12345678//反例 ： public Integer getData() &#123; if(true) &#123; return data + 100; &#125; else &#123; return data - 100; &#125; &#125; 17.【推荐】循环体内，字符串的联接方式，使用StringBuilder的append方法进行扩展。12345//反例 ： String str = \"start\"; for(int i=0; i&lt;100; i++)&#123; str = str + \"hello\"; &#125; 说明：反编译出的字节码文件显示每次循环都会new出一个StringBuilder对象，然后进行append操作，最后通过toString方法返回String对象，造成内存资源浪费。 18.【推荐】final可提高程序响应效率，声明成final的情况： 不需要重新赋值的变量，包括类属性、局部变量。 对象参数前加final，表示不允许修改引用的指向。 类方法确定不允许被重写。 19.【推荐】慎用Object的clone方法来拷贝对象。说明：对象的clone方法默认是浅拷贝，若想实现深拷贝需要重写clone方法实现属性对象的拷贝。 20.【推荐】类成员与方法访问控制从严： 如果不允许外部直接通过new来创建对象，那么构造方法必须是private。 工具类不允许有public或default构造方法。 类非static成员变量并且与子类共享，必须是protected。 类非static成员变量并且仅在本类使用，必须是private。 类static成员变量如果仅在本类使用，必须是private。 若是static成员变量，必须考虑是否为final。 类成员方法只供类内部调用，必须是private。 类成员方法只对继承类公开，那么限制为protected。 说明：任何类、方法、参数、变量，严控访问范围。过宽泛的访问范围，不利于模块解耦。思考：如果是一个private的方法，想删除就删除，可是一个public的Service方法，或者一个public的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，如果无限制的到处跑，那么你会担心的。 (五) 集合处理1. 【强制】Map/Set的key为自定义对象时，必须重写hashCode和equals。12 正例 ：String重写了hashCode和equals方法，所以我们可以非常愉快地使用String对象作为key来使用。 2. 【强制】ArrayList的subList结果不可强转成ArrayList，否则会抛出ClassCastException异常：java.util.RandomAccessSubList cannot be cast to java.util.ArrayList ;说明：subList 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList ，而是 ArrayList的一个视图，对于SubList子列表的所有操作最终会反映到原列表上。 3. 【强制】在subList场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均产生ConcurrentModificationException 异常。4. 【强制】使用集合转数组的方法，必须使用集合的toArray(T[] array)，传入的是类型完全一样的数组，大小就是list.size()。1234567反例 ：直接使用toArray无参方法存在问题，此方法返回值只能是Object[]类，若强转其它类型数组将出现ClassCastException错误。正例 ： List&lt;String&gt; list = new ArrayList&lt;String&gt;(2); list.add(&quot;guan&quot;); list.add(&quot;bao&quot;); String[] array = new String[list.size()]; array = list.toArray(array); 说明：使用toArray带参方法，入参分配的数组空间不够大时，toArray方法内部将重新分配内存空间，并返回新数组地址；如果数组元素大于实际所需，下标为[ list.size() ]的数组元素将被置为null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。 5. 【强制】使用工具类Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的add/remove/clear方法会抛出UnsupportedOperationException异常。说明：asList的返回对象是一个Arrays内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。String[] str = new String[] { “a”, “b” };List list = Arrays.asList(str);第一种情况：list.add(“c”); 运行时异常。第二种情况：str[0]= “gujin”; 那么list.get(0)也会随之修改。 6. 【强制】泛型通配符&lt;?extendsT&gt;来接收返回的数据，此写法的泛型集合不能使用add方法。说明：苹果装箱后返回一个&lt;? extends Fruits&gt;对象，此对象就不能往里加任何水果，包括苹果。 7. 【强制】不要在foreach循环里进行元素的remove/add操作。remove元素请使用Iterator方式，如果并发操作，需要对Iterator对象加锁。12345678910111213141516171819//反例 ： List&lt;String&gt; a = new ArrayList&lt;String&gt;(); a.add(\"1\"); a.add(\"2\"); for (String temp : a) &#123; if(\"1\".equals(temp))&#123; a.remove(temp); &#125; &#125;//说明：这个例子的执行结果会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？正例 ： Iterator&lt;String&gt; it = a.iterator(); while(it.hasNext())&#123; String temp = it.next(); if(删除元素的条件)&#123; it.remove(); &#125; &#125; 8. 【强制】在JDK7版本以上，Comparator要满足自反性，传递性，对称性，不然Arrays.sort，Collections.sort会报IllegalArgumentException异常。说明： 自反性：x，y的比较结果和y，x的比较结果相反。 传递性：x&gt;y,y&gt;z,则x&gt;z。 对称性：x=y,则x,z比较结果和y，z比较结果相同。 1234567//反例 ：下例中没有处理相等的情况，实际使用中可能会出现异常： new Comparator&lt;Student&gt;() &#123; @Override public int compare(Student o1, Student o2) &#123; return o1.getId() &gt; o2.getId() ? 1 : -1; &#125; &#125; 9. 【推荐】集合初始化时，尽量指定集合初始值大小。说明：ArrayList尽量使用ArrayList(int initialCapacity) 初始化。 10.【推荐】使用entrySet遍历Map类集合KV，而不是keySet方式进行遍历。说明：keySet其实是遍历了2次，一次是转为Iterator对象，另一次是从hashMap中取出key所对应的value。而entrySet只是遍历了一次就把key和value都放到了entry中，效率更高。如果是JDK8，使用Map.foreach方法。 12 正例 ：values()返回的是V值集合，是一个list集合对象；keySet()返回的是K值集合，是一个Set集合对象；entrySet()返回的是K-V值组合集合。 11.【推荐】高度注意Map类集合K/V能不能存储null值的情况，如下表格： 集合类 Key Value Super 说明 Hashtable 不允许为null 不允许为null Dictionary 线程安全 ConcurrentHashMap 不允许为null 不允许为null AbstractMap 线程局部安全 TreeMap 不允许为null 允许为null AbstractMap 线程不安全 HashMap 允许为null 允许为null AbstractMap 线程不安全 1反例 ：很多同学认为ConcurrentHashMap是可以置入null值。在批量翻译场景中，子线程分发时，出现置入null值的情况，但主线程没有捕获到此异常，导致排查困难。 12.【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。说明：稳定性指集合每次遍历的元素次序是一定的。有序性是指遍历的结果是按某种比较规则依次排列的。如：ArrayList是order/unsort；HashMap是unorder/unsort；TreeSet是order/sort。 13.【参考】利用Set元素唯一的特性，可以快速对另一个集合进行去重操作，避免使用List的contains方法进行遍历去重操作。(六) 并发处理1. 【强制】获取单例对象要线程安全。在单例对象里面做操作也要保证线程安全。说明：资源驱动类、工具类、单例工厂类都需要注意。 2. 【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。 3. 【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为static变量，如果定义为static，必须加锁，或者使用DateUtils工具类。1234567//正例 ：注意线程安全，使用DateUtils。亦推荐如下处理： private static final ThreadLocal&lt;DateFormat&gt; df = new ThreadLocal&lt;DateFormat&gt;() &#123; @Override protected DateFormat initialValue() &#123; return new SimpleDateFormat(\"yyyy-MM-dd\"); &#125; &#125; 说明：如果是JDK8的应用，可以使用instant代替Date，Localdatetime代替Calendar，Datetimeformatter代替Simpledateformatter，官方给出的解释：simple beautiful strong immutable thread-safe。 4. 【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。5. 【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。说明：线程一需要对表A、B、C依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是A、B、C，否则可能出现死锁。 6. 【强制】并发修改同一记录时，避免更新丢失，要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用version作为更新依据。说明：如果每次访问冲突概率小于20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于3次。 7. 【强制】多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用ScheduledExecutorService则没有这个问题。8. 【强制】线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。说明：Executors各个方法的弊端： newFixedThreadPool和newSingleThreadExecutor: 主要问题是堆积的请求处理队列可能会耗费非常大的内存，甚至OOM。 newCachedThreadPool和newScheduledThreadPool: 主要问题是线程数最大数是Integer.MAX_VALUE，可能会创建数量非常多的线程，甚至OOM。 9. 【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。123456//正例 ： public class TimerTaskThread extends Thread &#123; public TimerTaskThread()&#123; super.setName(\"TimerTaskThread\"); … &#125; &#125; 10.【推荐】使用CountDownLatch进行异步转同步操作，每个线程退出前必须调用countDown方法，线程执行代码注意catch异常，确保countDown方法可以执行，避免主线程无法执行至countDown方法，直到超时才返回结果。说明：注意，子线程抛出异常堆栈，不能在主线程try-catch到。 11.【推荐】避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed导致的性能下降。说明：Random实例包括java.util.Random 的实例或者 Math.random()实例。 1正例 ：在JDK7之后，可以直接使用APIThreadLocalRandom，在 JDK7之前，可以做到每个线程一个实例。 12.【推荐】通过双重检查锁（double-checkedlocking）（在并发场景）实现延迟初始化的优化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration),推荐问题解决方案中较为简单一种（适用于jdk5及以上版本），将目标属性声明为 volatile型（比如反例 中修改helper的属性声明为private volatile Helper helper = null;）；123456789101112//反例 ： class Foo &#123; private Helper helper = null; public Helper getHelper() &#123; if (helper == null) synchronized(this) &#123; if (helper == null) helper = new Helper(); &#125; return helper; &#125; // other functions and members... &#125; 13.【参考】volatile解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果想取回count++数据，使用如下类实现：AtomicInteger count = new AtomicInteger(); count.addAndGet(1); count++操作如果是JDK8，推荐使用LongAdder对象，比AtomicLong性能更好（减少乐观锁的重试次数）。 14.【参考】注意HashMap的扩容死链，导致CPU飙升的问题。15.【参考】ThreadLocal无法解决共享对象的更新问题，ThreadLocal对象建议使用static修饰。这个变量是针对一个线程内所有操作共有的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。(七) 控制语句1. 【强制】在一个switch块内，每个case要么通过break/return来终止，要么注释说明程序将继续执行到哪一个case为止；在一个switch块内，都必须包含一个default语句并且放在最后，即使它什么代码也没有。2. 【强制】在if/else/for/while/do语句中必须使用大括号，即使只有一行代码，避免使用下面的形式：if (condition) statements;3. 【推荐】推荐尽量少用else， if-else的方式可以改写成：if(condition){ … return obj;}// 接着写else的业务逻辑代码;说明：如果使用要if-elseif-else方式表达逻辑，【强制】请勿超过3层，超过请使用状态设计模式。 4. 【推荐】除常用方法（如getXxx/isXxx）等外，不要在条件判断中执行复杂的语句，以提高可读性。12345678910//正例 ：//伪代码如下 InputStream stream = file.open(fileName, \"w\"); if (stream != null) &#123; … &#125;//反例 ： if (file.open(fileName, \"w\") != null)) &#123; … &#125; 5. 【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的try-catch操作（这个try-catch是否可以移至循环体外）。6. 【推荐】接口入参保护，这种场景常见的是用于做批量操作的接口。7. 【参考】方法中需要进行参数校验的场景： 调用频次低的方法。 执行时间开销很大的方法，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。 需要极高稳定性和可用性的方法。 对外提供的开放接口，不管是RPC/API/HTTP接口。 8. 【参考】方法中不需要参数校验的场景： 极有可能被循环调用的方法，不建议对参数进行校验。但在方法说明里必须注明外部参数检查。 底层的方法调用频度都比较高，一般不校验。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般DAO层与Service层都在同一个应用中，部署在同一台服务器中，所以DAO的参数校验，可以省略。 被声明成private只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。 (八) 注释规约1. 【强制】类、类属性、类方法的注释必须使用javadoc规范，使用/*内容/格式，不得使用//xxx方式。说明：在IDE编辑窗口中，javadoc方式会提示相关注释，生成javadoc可以正确输出相应注释；在IDE中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。 2. 【强制】所有的抽象方法（包括接口中的方法）必须要用javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。说明：如有实现和调用注意事项，请一并说明。 3. 【强制】所有的类都必须添加创建者信息。4. 【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/ /注释，注意与代码对齐。5. 【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。6. 【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词、关键字，保持英文原文即可。1反例 ：“TCP连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。 7. 【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。 8. 【参考】注释掉的代码尽量要配合说明，而不是简单的注释掉。说明：代码被注释掉有两种可能性：1）后续会恢复此段代码逻辑。2）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。 9. 【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。10.【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。1234反例 ： // put elephant into fridge put(elephant, fridge); 方法名put，加上两个有意义的变量名elephant和fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。 11.【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。 待办事宜（TODO）:（ 标记人，标记时间，[预计处理时间]）表示需要实现，但目前还未实现的功能。这实际上是一个javadoc的标签，目前的javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个javadoc标签）。 错误，不能工作（FIXME）:（标记人，标记时间，[预计处理时间]）在注释中用FIXME标记某代码是错误的，而且不能工作，需要及时纠正的情况。 (九) 其它1. 【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。说明：不要在方法体内定义：Pattern pattern = Pattern.compile(规则); 2. 【强制】避免用Apache Beanutils进行属性的copy。说明：Apache BeanUtils性能较差，可以使用其他方案比如Spring BeanUtils, CglibBeanCopier。 3. 【强制】velocity调用POJO类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用POJO的getXxx()，如果是boolean基本数据类型变量（注意，boolean命名不需要加is前缀），会自动调用isXxx()方法。说明：注意如果是Boolean包装类对象，优先调用getXxx()的方法。 4. 【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。说明：如果var=null或者不存在，那么${var}会直接显示在页面上。 5. 【强制】注意 Math.random() 这个方法返回是double类型，注意取值范围 0≤x&lt;1（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将x放大10的若干倍然后取整，直接使用Random对象的nextInt或者nextLong方法。6. 【强制】获取当前毫秒数：System.currentTimeMillis(); 而不是new Date().getTime();说明：如果想获取更加精确的纳秒级时间值，用System.nanoTime。在JDK8中，针对统计时间等场景，推荐使用Instant类。 7. 【推荐】尽量不要在vm中加入变量声明、逻辑运算符，更不要在vm模板中加入任何复杂的逻辑。8. 【推荐】任何数据结构的使用都应限制大小。说明：这点很难完全做到，但很多次的故障都是因为数据结构自增长，结果造成内存被吃光。 9. 【推荐】对于“明确停止使用的代码和配置”，如方法、变量、类、配置文件、动态配置属性等要坚决从程序中清理出去，避免造成过多垃圾。清理这类垃圾代码是技术气场，不要有这样的观念：“不做不错，多做多错”。","raw":null,"content":null,"categories":[],"tags":[{"name":"开发规范","slug":"开发规范","permalink":"https://gloriabing.github.io/tags/开发规范/"}]},{"title":"Leetcode 13. Roman to Integer 解题报告","slug":"Leetcode-Roman-to-Integer","date":"2016-12-30T07:54:26.000Z","updated":"2016-12-30T07:56:54.000Z","comments":true,"path":"2016/12/30/Leetcode-Roman-to-Integer/","link":"","permalink":"https://gloriabing.github.io/2016/12/30/Leetcode-Roman-to-Integer/","excerpt":"","text":"题目描述： Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999. 解题思路： 要求将一个罗马数字转换为整数，首先要知道罗马数字与阿拉伯数字的对应转换关系，对应关系如下： I -&gt; 1 V -&gt; 5 X -&gt; 10 L -&gt; 50 C -&gt; 100 D -&gt; 500 M -&gt; 1000 例如： 将XVII转换为整数 X = 10 V = 5 I = 1 I = 1 显然结果为 10+5+1+1 = 17 考虑： 如果将XCIX转换为整数是多少呢？ X = 10 C = 100 I = 1 X = 10 难道结果为 10+100+1+10 = 121 ? 实际结果应该是 (100-10)+(10-1) = 99 所以，转换过程不仅仅是将每个字母转换为对应的数字以后相加得出结果，解题过程应该是这样的： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950 输入：XCIX 当前位为current, 上一位为pre，结果为result 初始化result = pre 如果 current&lt;=pre 时，result += current, 比如 VI = 5+1 = 6 如果 current&gt;pre 时，result = (result-pre) + (current-pre) ，比如XC = (10-10) + (100-10) = 90``` 实现代码如下（Java）```javapublic int romanToInt(String s) &#123; if (s == null || s.equals(&quot;&quot;)) &#123; return 0; &#125; int pre = toNumber(s.charAt(0)); int result = pre; for (int i = 1; i &lt; s.length(); i++) &#123; int current = toNumber(s.charAt(i)); if (current &gt; pre) &#123; result = result - pre + (current - pre); &#125; else &#123; result += current; &#125; pre = current; &#125; return result; &#125; public int toNumber(char c) &#123; switch (c) &#123; case &apos;I&apos;: return 1; case &apos;V&apos;: return 5; case &apos;X&apos;: return 10; case &apos;L&apos;: return 50; case &apos;C&apos;: return 100; case &apos;D&apos;: return 500; case &apos;M&apos;: return 1000; &#125; return 0; &#125;","raw":null,"content":null,"categories":[],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://gloriabing.github.io/tags/leetcode/"}]},{"title":"Divide Two Integers","slug":"divide-two-integers","date":"2016-12-22T02:32:23.000Z","updated":"2016-12-22T03:12:48.000Z","comments":true,"path":"2016/12/22/divide-two-integers/","link":"","permalink":"https://gloriabing.github.io/2016/12/22/divide-two-integers/","excerpt":"","text":"Description: Divide two integers without using multiplication, division and mod operator. If it is overflow, return MAX_INT. 最笨的实现方式： 在case为(-2147483648, -1)时，运行会超时 123456789101112131415161718192021222324public int divide(int dividend, int divisor) &#123; if (divisor == 0) &#123; return Integer.MAX_VALUE; &#125; if (dividend == 0) &#123; return 0; &#125; int absDividend = Math.abs(dividend); if (dividend == Integer.MIN_VALUE) &#123; absDividend = -(dividend + 1); &#125; int absDivisor = Math.abs(divisor); int value = 0; while (absDividend &gt;= 0) &#123; absDividend -= absDivisor; if (absDividend &gt;= 0) &#123; value++; &#125; &#125; if ((dividend &lt; 0 &amp;&amp; divisor &gt; 0) || (dividend &gt; 0 &amp;&amp; divisor &lt; 0)) &#123; return -value; &#125; return value;&#125; 更好的实现方式： 123456789101112131415161718192021222324252627282930313233343536public int divide(int dividend, int divisor) &#123; if (divisor == 0) &#123; return Integer.MAX_VALUE; &#125; if (dividend == 0) &#123; return 0; &#125; long absDividend = Math.abs((long) dividend); long absDivisor = Math.abs((long) divisor); long tempDivisor = absDivisor; int length = 0; while (tempDivisor != 0) &#123; tempDivisor &gt;&gt;= 1; length++; &#125; long result = 0; for (int i = 32 - length; i &gt;= 0; i--) &#123; if ((absDivisor &lt;&lt; i) &lt;= absDividend) &#123; result += (1l &lt;&lt; i); absDividend -= (absDivisor &lt;&lt; i); &#125; &#125; if ((dividend &lt; 0 &amp;&amp; divisor &gt; 0) || (dividend &gt; 0 &amp;&amp; divisor &lt; 0)) &#123; return (int)-result; &#125; if (result &gt; Integer.MAX_VALUE) &#123; result = -1 * ((int) result + 1); &#125; return (int)result;&#125; PS :需要注意几组case： 2147483647,1 2147483647,-1 -2147483648,-1 -2147483648,1","raw":null,"content":null,"categories":[],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://gloriabing.github.io/tags/leetcode/"}]},{"title":"芒果TV视频播放地址破解","slug":"mgtv-parser","date":"2016-12-16T09:17:40.000Z","updated":"2016-12-16T09:24:23.000Z","comments":true,"path":"2016/12/16/mgtv-parser/","link":"","permalink":"https://gloriabing.github.io/2016/12/16/mgtv-parser/","excerpt":"","text":"PC端web页面入口点击进入H5页面入口点击进入，访问H5页面时需要设置浏览器UA，选择移动端User-Agent 提取视频资源的partId和clipId 123web url格式 ：http://www.mgtv.com/b/291581/3735826.htmlH5 url格式 ：http://m.mgtv.com/#/b/298442/3734000/b/后面的内容即为所需id --&gt; /b/([clipId])/([partId]) 将上述提取出的partId和clipId替换到下面api的对应位置：http://v5m.api.mgtv.com/vrs/getByPartId?partId=3734000&amp;clipId=298442&amp;callback=jsonp_hdem511pf0ohr65 提取api返回结果中的startUrl作为host，后面拼接stream-&gt;m3u8Url或者mp4Url 1234567891011121314151617181920212223&#123; \"code\": 200, \"data\": &#123; ... \"stream\": &#123; \"m3u8Url\": [ \"/vod.do? fmt=2&amp;pno=1031&amp;fid=E852693CA85744C64E5A6A53C219913D&amp;limitrate=0&amp;file=/c1/2016/12/10_0/E852693CA85744C64E5A6A53C219913D_20161210_1_1_402_mp4/73320915169BC35D1B6995A18E11B8C9.m3u8\" ], \"mp4Url\": [ \"/vod.do?fmt=2&amp;pno=1031&amp;fid=E852693CA85744C64E5A6A53C219913D&amp;limitrate=0&amp;file=/c1/2016/12/10_0/E852693CA85744C64E5A6A53C219913D_20161210_1_1_402.mp4\" ], \"retryUrl\": &#123; \"r1\": \"http://disp1.titan.mgtv.com\", \"r2\": \"https://disp2.titan.mgtv.com\" &#125;, \"startUrl\": \"http://disp.titan.mgtv.com\" &#125;, ... &#125;&#125;//拼接结果为：//http://disp.titan.mgtv.com/vod.do?fmt=2&amp;pno=1031&amp;fid=E852693CA85744C64E5A6A53C219913D&amp;limitrate=0&amp;file=/c1/2016/12/10_0/E852693CA85744C64E5A6A53C219913D_20161210_1_1_402_mp4/73320915169BC35D1B6995A18E11B8C9.m3u8 将上面一步的拼接结果打开，返回值的info部分即为真实的视频播放地址","raw":null,"content":null,"categories":[],"tags":[{"name":"视频播放地址破解","slug":"视频播放地址破解","permalink":"https://gloriabing.github.io/tags/视频播放地址破解/"}]},{"title":"sohu视频地址破解","slug":"sohu-parser","date":"2016-12-11T13:47:10.000Z","updated":"2017-02-03T07:28:27.000Z","comments":true,"path":"2016/12/11/sohu-parser/","link":"","permalink":"https://gloriabing.github.io/2016/12/11/sohu-parser/","excerpt":"","text":"仅限免费资源采用h5端，通过浏览器抓包进行分析，搜狐视频h5端入口地址进入 在url中提取视频vid 12url : http://m.tv.sohu.com/v3431308.shtml?aid=9247626&amp;channeled=1210020001&amp;columnid=57vid为&quot;http://m.tv.sohu.com/v&quot;与&quot;.shtml&quot;中间的数字部分 将提取出的vid替换到下面的api中，获得视频播放地址接口 1http://m.tv.sohu.com/phone_playinfo?callback=jsonpx11&amp;vid=([vid])&amp;site=1&amp;appid=tv&amp;api_key=f351515304020cad28c92f70f002261c&amp;plat=17&amp;sver=1.0&amp;partner=1 接口中有3中格式的播放地址 downloadUrl中为清晰度最低的MP4格式视频 m3u8中有多种清晰度的视频，这种格式需要有支持m3u8格式视频播放的播放器才可以观看 mp4中为多段格式视频，不建议使用，如需使用可自行将多段合并成一段进行观看 PS :如果通过搜狐视频pc端点击进入，也可通过以上方法进行提取视频源播放地址，区别在于提取vid的方式，提取方法如下： 查看网页源代码 搜索var vid，这个值即为vid","raw":null,"content":null,"categories":[],"tags":[{"name":"视频播放地址破解","slug":"视频播放地址破解","permalink":"https://gloriabing.github.io/tags/视频播放地址破解/"}]},{"title":"py-postgresql 基本操作","slug":"py-postgresql","date":"2016-12-10T14:44:08.000Z","updated":"2016-12-14T06:05:53.000Z","comments":true,"path":"2016/12/10/py-postgresql/","link":"","permalink":"https://gloriabing.github.io/2016/12/10/py-postgresql/","excerpt":"","text":"###创建连接 详细config配置参见官方文档中Connection Keywords部分12345678config = &#123;'user': 'username','password': 'password','host': 'localhost','port': 5432,'database': 'postgres'&#125;db = pg_driver.connect(**config) 表创建123456789ps = db.prepare(\"\"\" CREATE TABLE IF NOT EXISTS employee ( employee_name text, employee_salary numeric, employee_dob date, employee_hire_date date ); \"\"\")ps() 插入1234567891011121314151617 from datetime import date, datetime mkemp = db.prepare(\"INSERT INTO employee VALUES ($1, $2, $3, $4)\")--单行插入 rs = mkemp( \"John Johnson\", \"92000\", date(1950, 12, 10), date(1998, 4, 23) )&gt; ('INSERT', 1) --'INSERT'为操作类型，1为影响行数--多行插入 mkemp.load_rows([ (\"Jack Johnson\", \"85000\", date(1962, 11, 23), date(1990, 3, 5)), (\"Debra McGuffer\", \"52000\", date(1973, 3, 4), date(2002, 1, 14)), (\"Barbara Smith\", \"86000\", date(1965, 2, 24), date(2005, 7, 19)), ]) 查询12345 ps = db.prepare(\"select * from employee\") rs = ps() print(rs)&gt; [('Jack Johnson', Decimal('85000'), datetime.date(1962, 11, 23), datetime.date(1990, 3, 5)), ('Debra McGuffer', Decimal('52000'), datetime.date(1973, 3, 4), datetime.date(2002, 1, 14)), ('Barbara Smith', Decimal('86000'), datetime.date(1965, 2, 24), datetime.date(2005, 7, 19)), ('John Johnson', Decimal('92000'), datetime.date(1950, 12, 10), datetime.date(1998, 4, 23))] 查询结果遍历/取值方式，结果为list结构 整行遍历 1234567 for row in rs: print(row)&gt; ('Jack Johnson', Decimal('85000'), datetime.date(1962, 11, 23), datetime.date(1990, 3, 5))&gt; ('Debra McGuffer', Decimal('52000'), datetime.date(1973, 3, 4), datetime.date(2002, 1, 14))&gt; ('Barbara Smith', Decimal('86000'), datetime.date(1965, 2, 24), datetime.date(2005, 7, 19))&gt; ('John Johnson', Decimal('92000'), datetime.date(1950, 12, 10), datetime.date(1998, 4, 23)) 输出每行指定位置的值 12345678--下表从0开始 for row in rs: print(row[0])&gt; Jack Johnson&gt; Debra McGuffer&gt; Barbara Smith&gt; John Johnson 输出每行指定字段的值 1234567 for row in rs: print(row['employee_name'])&gt; Jack Johnson&gt; Debra McGuffer&gt; Barbara Smith&gt; John Johnson 迭代行中的key-value 12345678 row = db.prepare(\"select * from employee\").first() for k, v in row.items(): print(k + \"=\" + str(v))&gt; employee_name=Jack Johnson&gt; employee_salary=85000&gt; employee_dob=1962-11-23&gt; employee_hire_date=1990-03-05 更新12345 ps = db.prepare(\"update employee set employee_name='gloria' where employee_dob=$1\") rs = ps(date(1962, 11, 23)) print(rs())&gt; ('UPDATE', 1)","raw":null,"content":null,"categories":[],"tags":[]}]}